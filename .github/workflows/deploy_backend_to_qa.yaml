name: Deploy backend to QA

on:
  push:
    branches: [ "master", "develop" ]
    paths:
      - app/backend/**
  pull_request:
    branches: [ "master", "develop" ]
    paths:
      - app/backend/**

jobs:
  build:
    name: Building image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        
      - name: DockerHub login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./app/backend/Cower
          push: true
          tags: ichinichi/cower:latest

  update_server:
      name: Updating QA environment
      runs-on: ubuntu-latest
      environment: 
        name: QA
        url: https://${{ vars.SERVER_HOSTNAME }}:${{ vars.APP_PORT }}
      needs: build
      steps:
        - name: Replacing DB container
          uses: appleboy/ssh-action@master
          with:
            host: ${{ vars.SERVER_HOSTNAME }}
            username: ${{ secrets.SERVER_USERNAME }}
            password: ${{ secrets.SERVER_PASSWORD }}
            script: |
              docker image pull postgres
              docker container stop db
              docker container prune -f
              docker run -d \
              --name db \
              -e POSTGRES_USER='${{ secrets.DB_USER }}' \
              -e POSTGRES_PASSWORD='${{ secrets.DB_PASSWORD }}' \
              -e POSTGRES_DB=cower \
              -p 5432:5432 \
              -v /cower/data:/var/lib/postgresql/data \
              postgres
              docker image prune -f
      steps:
        - name: Replacing backend container
          uses: appleboy/ssh-action@master
          with:
            host: ${{ vars.SERVER_HOSTNAME }}
            username: ${{ secrets.SERVER_USERNAME }}
            password: ${{ secrets.SERVER_PASSWORD }}
            script: |
              docker image pull ichinichi/cower
              docker container stop cower
              docker container prune -f
              docker run -d \
              --name cower \
              --restart unless-stopped \
              -e ASPNETCORE_ENVIRONMENT='Development' \
              -e CERTIFICATE_PASSWORD='${{ secrets.CERTIFICATE_PASSWORD }}' \
              -e JWT_KEY='${{ secrets.JWT_KEY }}' \
              -e DB_CONNECTION_STRING='${{ secrets.DB_CONNECTION_STRING }}' \
              -p ${{ vars.APP_PORT }}:8080 \
              ichinichi/cower
              docker image prune -f